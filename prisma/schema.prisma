// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  name     String
  birthday DateTime @db.Date
  loginId  Int      @unique // Corrigir o tipo para Int
  login    Login    @relation(name: "LoginToUser", fields: [loginId], references: [id], onDelete: Cascade)
}

model Login {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
  user     User?  @relation(name: "LoginToUser")
}

model Incidente {
  id                        Int      @id @default(autoincrement())
  Numero                   String
  Empresa                  String
  Data_de_criacao          DateTime @db.Date
  Autoridades_comunicadas  String?
  Instalacao               String
  Data_da_primeira_observacao DateTime @db.Date
  Hora_da_primeira_observacao String
  Data_estimada_do_incidente DateTime @db.Date
  Hora_do_incidente        String
  Numero_de_feridos_graves Int
  Numero_de_fatalidades    Int
}

model Acidente {
  id          Int       @id @default(autoincrement())
  titulo      String
  tipo        String
  situacao    String
  data        DateTime
  horario     String
  descricao   String
  resolucao   Resolucao?
}

model Resolucao {
  id           Int      @id @default(autoincrement())
  responsavel  String
  data         DateTime
  descricao    String
  custo_total  Float
  acidenteId   Int      @unique
  acidente     Acidente @relation(fields: [acidenteId], references: [id])
}

model Noticia {
  id        Int      @id @default(autoincrement())
  titulo    String
  descricao String
  data      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}